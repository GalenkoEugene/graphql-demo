extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@inaccessible", "@tag"])

type Comment @federation__key(fields: "id") {
  body: String!
  id: ID!
  postId: ID!
}

"""
Attributes for creating or updating a comment
"""
input CommentAttributes {
  """
  The body of the comment
  """
  body: String!

  """
  The ID of the post to which the comment belongs
  """
  postId: ID!
}

"""
Autogenerated input type of CreateCommentByGid
"""
input CreateCommentByGidInput {
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  postGid: ID!
}

"""
Autogenerated return type of CreateCommentByGid.
"""
type CreateCommentByGidPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: Comment
  errors: [String!]!
}

"""
Autogenerated input type of CreateCommentByPostId
"""
input CreateCommentByPostIdInput {
  attributes: CommentAttributes!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCommentByPostId.
"""
type CreateCommentByPostIdPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  comment: Comment
  errors: [String!]!
}

type Mutation {
  createCommentByGlobalId(
    """
    Parameters for CreateCommentByGid
    """
    input: CreateCommentByGidInput!
  ): CreateCommentByGidPayload
  createCommentByPostId(
    """
    Parameters for CreateCommentByPostId
    """
    input: CreateCommentByPostIdInput!
  ): CreateCommentByPostIdPayload
}

"""
A blog post
"""
type Post @federation__key(fields: "id") {
  """
  This post's comments, or null if this post has comments disabled.
  """
  comments: [Comment!]
  gid: String!
  id: ID!
  title: String!
  truncatedPreview: String!
}

"""
The query root of this schema
"""
type Query {
  post(id: ID!): Post!
  user(id: ID!): User @federation__shareable
}

"""
User entity from 'accounts' service
"""
type User @federation__key(fields: "id") @federation__extends {
  """
  User's comments on posts
  """
  comments: [Comment!]!

  """
  User's ID
  """
  id: ID @federation__external
}